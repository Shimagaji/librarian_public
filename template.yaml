Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /webhook:
            post:
              responses:
                '200':
                  description: default OK response
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiToStateMachineRole.Arn
                httpMethod: POST
                type: aws
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartExecution
                responses:
                  default:
                    statusCode: 200
                requestTemplates:
                  application/json: !Sub |-
                    {
                      "input": "$util.escapeJavaScript($input.json('$'))",
                      "name": "$context.requestId",
                      "stateMachineArn": "${StateMachine}"
                    }
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: destination check
        States:
          destination check:
            Type: Choice
            Choices:
              - Variable: $.destination
                StringEquals: Ubf1630ff8222298c971def5f6d99473e
                Next: Map
            Default: invalid bot
          invalid bot:
            Type: Fail
          Map:
            Type: Map
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: message check
              States:
                message check:
                  Type: Choice
                  Choices:
                    - Variable: $.event.type
                      StringEquals: message
                      Next: PutTalkHistory_Input
                  Default: no message
                PutTalkHistory_Input:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  Parameters:
                    FunctionName: ${PutTalkHistory}
                    Payload:
                      user_id.$: $.event.source.userId
                      text.$: $.event.message.text
                      position: user
                  Retry:
                    - ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                        - Lambda.TooManyRequestsException
                      IntervalSeconds: 1
                      MaxAttempts: 3
                      BackoffRate: 2
                  Next: GetTalkHistory
                  ResultPath: $.result
                GetTalkHistory:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  Parameters:
                    FunctionName: ${GetTalkHistory}
                    Payload:
                      user_id.$: $.event.source.userId
                      text.$: $.event.message.text
                  Retry:
                    - ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                        - Lambda.TooManyRequestsException
                      IntervalSeconds: 1
                      MaxAttempts: 3
                      BackoffRate: 2
                  Next: PassThrough
                  ResultPath: $.history
                PassThrough:
                  Type: Pass
                  Next: InvokeAgent
                  Parameters:
                    user_id.$: $.event.source.userId
                    replyToken.$: $.event.replyToken
                    text.$: $.history.Payload.body
                InvokeAgent:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  Parameters:
                    Payload.$: $
                    FunctionName: ${InvokeAgent}
                  Retry:
                    - ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                        - Lambda.TooManyRequestsException
                      IntervalSeconds: 1
                      MaxAttempts: 3
                      BackoffRate: 2
                  Next: Call LINE API
                  TimeoutSeconds: 600
                  ResultPath: $.response
                no message:
                  Type: Fail
                Call LINE API:
                  Type: Task
                  Resource: arn:aws:states:::http:invoke
                  Parameters:
                    Method: POST
                    ApiEndpoint: https://api.line.me/v2/bot/message/reply
                    Authentication:
                      ConnectionArn: 【FILL】EventBridge API Destination接続のARN
                    RequestBody:
                      replyToken.$: $.replyToken
                      messages:
                        - type: text
                          text.$: $.response.Payload
                  Retry:
                    - ErrorEquals:
                        - States.ALL
                      BackoffRate: 2
                      IntervalSeconds: 1
                      MaxAttempts: 3
                      JitterStrategy: FULL
                  Next: PutTalkHistory_Output
                  ResultPath: $.callResult
                PutTalkHistory_Output:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  OutputPath: $.Payload
                  Parameters:
                    FunctionName: ${PutTalkHistory}
                    Payload:
                      user_id.$: $.user_id
                      text.$: $.response.Payload
                      position: assistant
                  Retry:
                    - ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                        - Lambda.TooManyRequestsException
                      IntervalSeconds: 1
                      MaxAttempts: 3
                      BackoffRate: 2
                  End: true
            End: true
            ItemsPath: $.events
            ItemSelector:
              event.$: $$.Map.Item.Value
      Logging:
        Level: ERROR
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
                - bedrock:InvokeModel
                - states:InvokeHTTPEndpoint
                - events:RetrieveConnectionCredentials
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
              Resource: '*'
        - LambdaInvokePolicy:
            FunctionName: !Ref PutTalkHistory
        - LambdaInvokePolicy:
            FunctionName: !Ref InvokeAgent
        - LambdaInvokePolicy:
            FunctionName: !Ref GetTalkHistory
      Tracing:
        Enabled: true
      Type: STANDARD
      DefinitionSubstitutions:
        PutTalkHistory: !GetAtt PutTalkHistory.Arn
        InvokeAgent: !GetAtt InvokeAgent.Arn
        GetTalkHistory: !GetAtt GetTalkHistory.Arn
      Events:
        ApiPOSTwebhook:
          Type: Api
          Properties:
            Path: /webhook
            Method: POST
            RestApiId: !Ref Api
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/vendedlogs/states/${AWS::StackName}-${ResourceId}-Logs
        - ResourceId: StateMachine
  ApiToStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: !Sub apigateway.${AWS::URLSuffix}
      Policies:
        - PolicyName: ExecuteStateMachine
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt StateMachine.Arn
  PutTalkHistory:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PutTalkHistory
      CodeUri: src/puttalkhistory
      Handler: handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TALKHISTORY_TABLE_NAME: !Ref TalkHistory
          TALKHISTORY_TABLE_ARN: !GetAtt TalkHistory.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TalkHistory
  PutTalkHistoryLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutTalkHistory}
  TalkHistory:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Librarian-TalkHistory
      AttributeDefinitions:
        - AttributeName: conversation_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: conversation_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GSI_user_id
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  BookList:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Librarian-BookList
      AttributeDefinitions:
        - AttributeName: bookId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: bookId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  CheckBorrowStatus:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CheckBorrowStatus
      CodeUri: src/checkborrowstatus
      Handler: handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          BOOKLIST_TABLE_NAME: !Ref BookList
          BOOKLIST_TABLE_ARN: !GetAtt BookList.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookList
  CheckBorrowStatusLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${CheckBorrowStatus}
  BorrowBook:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: BorrowBook
      CodeUri: src/borrowbook
      Handler: handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          BOOKLIST_TABLE_NAME: !Ref BookList
          BOOKLIST_TABLE_ARN: !GetAtt BookList.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookList
  BorrowBookLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${BorrowBook}
  ReturnBook:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ReturnBook
      CodeUri: src/returnbook
      Handler: handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          BOOKLIST_TABLE_NAME: !Ref BookList
          BOOKLIST_TABLE_ARN: !GetAtt BookList.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookList
  ReturnBookLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ReturnBook}
  InvokeAgent:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: InvokeAgent
      CodeUri: src/invokeagent
      Handler: handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 600
      Tracing: Active
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeAgent
              Resource: '*'
      Layers:
        - !Ref Layer
  InvokeAgentLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${InvokeAgent}
  GetTalkHistory:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetTalkHistory
      CodeUri: src/gettalkhistory
      Handler: handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TALKHISTORY_TABLE_NAME: !Ref TalkHistory
          TALKHISTORY_TABLE_ARN: !GetAtt TalkHistory.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TalkHistory
  GetTalkHistoryLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetTalkHistory}
  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: Layer
      ContentUri: src/Layer/boto3-1.28.57.zip
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: forAgent
      Members:
        - CheckBorrowStatus
        - ReturnBook
        - BorrowBook
        - BookList
    Group2:
      Label: Main
      Members:
        - Api
        - StateMachine
        - InvokeAgent
        - TalkHistory
        - GetTalkHistory
        - PutTalkHistory
        - Layer